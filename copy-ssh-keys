#!/usr/bin/perl

# copy-ssh-keys                             Bri Aug 2020
#
# Copy SSH keys and config between ejp hosts

use Getopt::Long;


# parse options
$help = '';
$check = '';
$copy = '';
$verbose = '';

GetOptions ('help' => \$help 'verbose' => \$verbose, 'check' => \$check, 'copy' => \$copy);

# My script name
$script = `basename $0`;
chomp($script);

# Usage
if ($help) {
    print "$script:\n";
    print "Utility to copy user SSH keys to partner system\n\n";
    print "\t-help\tDisplay this help\n";
    print "\t-check\tCompare timestamp of keys with last time copy performed\n";
    print "\t-copy\tCopy keys to partner system using rsync\n";
    print "\t-verbose\tShow more info about actions\n\n";
    print "The rsync operation will use your SSH credentials if available.\n";
    print "Otherwise you will be prompted as usial.\n";
    exit 0;
}

# Check for user's ssh conmfig files
$SSHDIR = "$ENV{'HOME'}/.ssh";

if (! -e $SSHDIR) {
    if ($verbose) {
        print "$script: $SSHDIR does not exist\n";
    }
    exit;
}

# Determine partner system
$HOST = `hostname`;
chomp($HOST);
if ($HOST eq "ejp-gateway01.ad.ucl.ac.uk") {
    $TARG = 'ejp-gateway02.ad.ucl.ac.uk';
} elsif ($HOST eq "ejp-gateway02.ad.ucl.ac.uk") {
    $TARG = 'ejp-gateway01.ad.ucl.ac.uk';
} else {
    print "$script: Source hostname not recognised\n";
    exit 1;
}

# Look for config files
$STAMP = "$SSHDIR/.timestamp";
$FILES = `find $SSHDIR -type f ! -name .timestamp`;

# Nothing found
if (! $FILES) {
    if ($verbose) {
        print "$script: no files in $SSHDIR\n";
    }
    exit;
}

# Check for timestamp and newer config files
if (! -e $STAMP) {
    if ($check || $verbose) {
        print "$script: timestamp does not exist\n";
    }
    $NEWFILES = `find $SSHDIR -type f`;
} else {
    $NEWFILES = `find $SSHDIR -type f -newer $STAMP`;
}

# Copy the files!
if ($NEWFILES) {
    if ($check || $verbose) {
        print "$script: $SSHDIR has updated files\n";
    }
    if ($copy) {
        if ($verbose) {
            $r = `rsync -av $SSHDIR $TARG:.ssh && touch $STAMP`;
        } else {
            $r = `rsync -a $SSHDIR $TARG:.ssh && touch $STAMP`;
        }
        print $r;
    }
}

